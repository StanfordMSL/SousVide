import numpy as np
import json
import os
import copy
import torch

from typing import Dict,Union,Tuple,List
from tqdm.notebook import trange

import figs.utilities.trajectory_helper as th
import figs.tsplines.min_snap as ms
import sousvide.synthesize.synthesize_helper as sh
import sousvide.synthesize.data_utils as du

from figs.simulator import Simulator
from figs.control.vehicle_rate_mpc import VehicleRateMPC
from figs.dynamics.model_specifications import generate_specifications

def generate_rollout_data(cohort_name:str,method_name:str,
                          flights:List[Tuple[str,str]],
                          Nro_sv:int=50):
    
    """
    Generates flight data for a given cohort. A cohort comprises a set of courses flown on a specific
    drone frame with a specific method of domain randomization. Flight data is agnostic to the pilot 
    and is generated by simulating variations of the drone over the set of courses using an MPC flight
    controller that has full knowledge. The flight data is saved to a .pt file in the cohort directory.

    Args:
        cohort_name:    Cohort name.
        method_name:    Sous Vide config.
        flights:        List of flights (scene,frame,course).
        Nro_sv:         Number of rollouts per save.

    Returns:
        None:           (flight data saved to cohort directory)
    """

    # Some useful path(s)
    workspace_path = os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    
    # Extract method configs
    method_path = os.path.join(workspace_path,"configs","method",method_name+".json")
        
    with open(method_path) as json_file:
        method_config = json.load(json_file)
    
    sample_set_config = method_config["sample_set"]
    trajectory_set_config = method_config["trajectory_set"]
    frame_set_config = method_config["frame_set"]

    Tdt_ro = sample_set_config["duration"]
    Nro_tp = sample_set_config["reps"]
    Ntp_sc = sample_set_config["rate"]
    err_tol = sample_set_config["tolerance"]
    rollout_name = sample_set_config["rollout"]
    policy_name = sample_set_config["policy"]
    frame_name = sample_set_config["frame"]

    # Extract policy and frame
    policy_path = os.path.join(workspace_path,"configs","policy",policy_name+".json")
    frame_path  = os.path.join(workspace_path,"configs","frame",frame_name+".json")
    
    with open(policy_path) as json_file:
        policy_config = json.load(json_file)

    with open(frame_path) as json_file:
        base_frame_config = json.load(json_file)   

    hz_ctl = policy_config["hz"]

    # Create cohort folder
    cohort_path = os.path.join(workspace_path,"cohorts",cohort_name)

    if not os.path.exists(cohort_path):
        os.makedirs(cohort_path)

    # Generate base drone specifications
    base_frame_specs = generate_specifications(base_frame_config)

    # Print some useful information
    print("==========================================================================")
    print("Cohort :",cohort_name)
    print("Method :",method_name)
    print("Policy :",policy_name)
    print("Frame  :",frame_name)
    print("Flights:",flights)

    # Generate rollouts for each course
    for scene_name,course_name in flights:
        # Load course_config
        course_path = os.path.join(workspace_path,"configs","course",course_name+".json")

        with open(course_path) as json_file:
            course_config = json.load(json_file)
        
        # Add course name
        course_config["name"] = course_name

        # Generate desired trajectory
        output = ms.solve(course_config)
        if output is not False:
            Tpd,CPd = output
            tXUd = th.TS_to_tXU(Tpd,CPd,base_frame_specs,hz_ctl)
        else:
            raise ValueError("Desired trajectory not feasible. Aborting.")
        
        # Generate simulator
        simulator = Simulator(scene_name,rollout_name)
        
        # Generate Sample Set Batches
        Ntp = Ntp_sc*int(Tpd[-1])                                       # Number of time points per trajectory
        Nsp = Nro_tp*Ntp                                                # Number of sample points (total)
        
        Tsp = np.tile(np.linspace(Tpd[0],Tpd[-1],Ntp+1)[:-1],Nro_tp)    # Entire sample points array
        Tsp += np.random.uniform(-1/Ntp_sc,1/Ntp_sc,Nsp)                # Add some noise to the sample points array
        Tsp = np.clip(Tsp,Tpd[0],Tpd[-1])                               # Clip the sample points array
        np.random.shuffle(Tsp)                                          # Shuffle the sample points array

        TTsp = np.split(Tsp,np.arange(Nro_sv,Nsp,Nro_sv))               # Split the sample points array into their batches
        
        # Print some diagnostics
        Ndc = int(Tdt_ro*hz_ctl)

        print("--------------------------------------------------------------------------")
        print("Course Name :",course_name)
        print("Rollout Reps:",Nro_tp,"(per time point)")
        print("Rollout Rate:",Ntp_sc,"(per second)")
        print("Rollout Data:",Ndc,"(per sample)")
        print("Total Rollouts:",Nsp)
        print("Batch Sizes :", len(TTsp)-1, "x", Nro_sv,"+ 1 x", len(TTsp[-1]),"(samples)")
        print("Total Data:",Nsp*Ndc)

        # Generate Sample Set Batches
        Ndata = 0
        for idx in trange(len(TTsp)):
            # Get the current batch
            Tsp = TTsp[idx]
            
            # Generate sample frames
            Frames = generate_frames(Tsp,base_frame_config,frame_set_config)

            # Generate sample perturbations
            Perturbations  = generate_perturbations(Tsp,Tpd,CPd,trajectory_set_config)

            # Generate rollout data
            Trajectories,Images = generate_rollouts(
                simulator,course_config,policy_config,
                Frames,Perturbations,Tdt_ro,err_tol)

            # Save the rollout data
            save_rollouts(cohort_path,course_name,Trajectories,Images,tXUd,idx)

            # Update the data count
            Ndata += sum([trajectory["Ndata"] for trajectory in Trajectories])

        # Print some diagnostics
        print("--------------------------------------------------------------------------")
        print("Generated ",Ndata," points of data.")
        print("--------------------------------------------------------------------------")

def generate_frames(Tsps:np.ndarray,
                    base_frame_config:Dict[str,Union[int,float,List[float]]],
                    frame_set_config:Dict[str,Union[float,List[float]]],
                    rng_seed:Union[int,None]=None) -> List[Dict[str,Union[np.ndarray,str,int,float]]]:
    
    """
    Generates a list of drone variations for a given base drone configuration. The configurations are
    generated by perturbing the base drone configuration with bounded uniform noise. The number of
    configurations generated is determined by the sample set config dictionary.

    Args:
        Tsps:                   Sample times.
        base_frame_config:      Base frame configuration dictionary.
        frame_set_config:       Frame sample set config dictionary.
        rng_seed:               Random number generator seed.

    Returns:
        Drones:                 List of drone configurations (dictionary format).
    """

    # Sample Count
    Nsps = len(Tsps)

    # Set random number generator seed
    if rng_seed is not None:
        np.random.seed(rng_seed)

    # Get frame items that will be randomized
    Items = {}
    for key in frame_set_config.keys():
        if key not in base_frame_config.keys():
            raise ValueError(f"Key '{key}' not found in base frame config.")
        else:
            value = np.array(base_frame_config[key])
            bound = np.array(frame_set_config[key])

            Items[key] = [value*(1-bound),value*(1+bound)]

    # Generate Drone Frames
    Frames = []
    for _ in range(Nsps):
        # Instantiate a new frame
        frame = copy.deepcopy(base_frame_config)

        # Randomize the frame
        for key in Items.keys():
            frame[key] = np.random.uniform(*Items[key])

        # Save to a dictionary
        Frames.append(frame)

    return Frames

def generate_perturbations(Tsps:np.ndarray,
                           Tpd:np.ndarray,CPd:np.ndarray,
                           trajectory_set_config:Dict[str,Union[int,bool]],
                           rng_seed:int=None) -> List[Dict[str,Union[float,np.ndarray]]]:
    """
    Generates a list of perturbed initial states for the drone given an ideal trajectory. The perturbed
    initial states are generated by sampling a random initial times and corresponding state vectors from
    the ideal trajectory using a bounded uniform distribution. The state vectors are then perturbed with
    uniform noise. The number of perturbed initial states generated is determined by the sample set
    config dictionary.

    Args:
        Tsps:                   Sample times.
        Tpi:                    Ideal trajectory times.
        CPi:                    Ideal trajectory control points.
        trajectory_set_config:  Trajectory set config dictionary.
        rng_seed:               Random number generator seed.

    Returns:
        Perturbations:          List of perturbations (dictionary format).
    """

    # Sample Count
    Nsps = len(Tsps)

    # Set random number generator seed
    if rng_seed is not None:
        np.random.seed(rng_seed)
    
    # Unpack the config
    w_x0 = np.array(trajectory_set_config["initial"],dtype=float)
    
    # Get ideal trajectory for quaternion checking
    tXUd = th.TS_to_tXU(Tpd,CPd,None,10)

    # Generate perturbed starting points    
    Perturbations = []
    for i in range(Nsps):
        # Sample random start time and get corresponding state vector sample
        t0 = Tsps[i]
        idx0 = np.where(Tpd <= t0)[0][-1]
        idx0 = min(idx0,(len(Tpd)-2))
        t00,t0f = Tpd[idx0],Tpd[idx0 + 1]

        x0s = th.ts_to_xu(t0-t00,t0f-t00,CPd[idx0,:,:],None)
        
        # Perturb state vector sample
        w0 = np.random.uniform(w_x0[0,:],w_x0[1,:])
        x0 = x0s + w0
        
        # Ensure quaternion is well-behaved (magnitude and closest to previous)
        idxr = np.where(tXUd[0,:] <= t0)[0][-1]
        x0[6:10] = th.obedient_quaternion(x0[6:10],tXUd[7:11,idxr])

        # Store perturbation in list
        perturbation = {"t0":t0,"x0":x0}
        Perturbations.append(perturbation)
    
    return Perturbations

def generate_rollouts(
        sim:Simulator,
        course_config:Dict[str,Union[np.ndarray,List[np.ndarray]]],
        policy_config:Dict[str,Union[int,float,List[float]]],
        Frames:Dict[str,Union[np.ndarray,str,int,float]],
        Perturbations:Dict[str,Union[float,np.ndarray]],
        Tdt_ro:float,err_tol:float
        ) -> Tuple[List[Dict[str,Union[np.ndarray,np.ndarray,np.ndarray]]],List[torch.Tensor]]:
    """
    Generates rollout data for the quadcopter given a list of drones and initial states (perturbations).
    The rollout comprises trajectory data and image data. The trajectory data is generated by running
    the MPC controller on the quadcopter for a fixed number of steps. The trajectory data consists of
    time, states [p,v,q], body rate inputs [fn,w], objective state, data count, solver timings, advisor
    data, rollout id, and course name. The image data is generated by rendering the quadcopter at each
    state in the trajectory data. The image data consists of the image data and the data count.

    Args:
        simulator:          Simulator object.
        course_config:      Course configuration dictionary.
        policy_config:      Policy configuration dictionary.
        Frames:             List of drone configurations.
        Perturbations:      List of perturbed initial states.
        Tdt_ro:             Rollout duration.

    Returns:
        Trajectories:           List of trajectory rollouts.
        Images:                 List of image rollouts.
    """
    
    # Unpack the trajectory
    Tpi,CPi = ms.solve(course_config)
    obj = sh.ts_to_obj(Tpi,CPi)
    tXUi = th.TS_to_tXU(Tpi,CPi,None,10)
    
    # Initialize rollout variables
    Trajectories,Images = [],[]

    # Rollout the trajectories
    for idx,(frame_config,perturbation) in enumerate(zip(Frames,Perturbations)):
        # Unpack rollout variables
        t0,x0 = perturbation["t0"],perturbation["x0"]
        tf = t0 + Tdt_ro

        # Load the simulation variables
        sim.load_frame(frame_config)
        ctl = VehicleRateMPC(course_config,policy_config,frame_config)
        
        # Simulate the flight
        Tro,Xro,Uro,Imgs,Tsol,Adv = sim.simulate(ctl,t0,tf,x0)
        
        # Check if the rollout data is useful
        err = np.min(np.linalg.norm(tXUi[1:4,:]-Xro[0:3,-1].reshape(-1,1),axis=0))
        if err < err_tol:
            # Package the rollout data
            trajectory = {
                "Tro":Tro,"Xro":Xro,"Uro":Uro,
                "Xid":tXUi[1:11,:],"obj":obj,"Ndata":Uro.shape[1],"Tsol":Tsol,"Adv":Adv,
                "rollout_id":str(idx).zfill(5),
                "course":course_config["name"],
                "frame":frame_config}

            images = {
                "images":Imgs,
                "rollout_id":str(idx).zfill(5),"course":course_config["name"]
            }

            # Store rollout data
            Trajectories.append(trajectory)
            Images.append(images)

        # Clear policy
        del ctl

    return Trajectories,Images

def save_rollouts(cohort_path:str,course_name:str,
                  Trajectories:List[Tuple[np.ndarray,np.ndarray,np.ndarray]],
                  Images:List[torch.Tensor],
                  tXUi:np.ndarray,
                  stack_id:Union[str,int]) -> None:
    """
    Saves the rollout data to a .pt file in folders corresponding to coursename within the cohort 
    directory. The rollout data is stored as a list of rollout dictionaries of size stack_size for
    ease of comprehension and loading (at a cost of storage space).
    
    Args:
        cohort_path:    Cohort path.
        course_name:    Name of the course.
        Trajectories:   Rollout data.
        Images:         Image data.
        tXUi:           Ideal trajectory data.
        stack_id:       Stack id.

    Returns:
        None:           (rollout data saved to cohort directory)
    """

    # Create rollout course directory (if it does not exist)
    rollout_course_path = os.path.join(cohort_path,"rollout_data",course_name)
    if not os.path.exists(rollout_course_path):
        os.makedirs(rollout_course_path)
    
    # Save the stacks
    Ndata = sum([trajectory["Ndata"] for trajectory in Trajectories])
    data_set_name = str(stack_id).zfill(3) if type(stack_id) == int else str(stack_id)
    trajectory_data_set_path = os.path.join(rollout_course_path,"trajectories"+data_set_name+".pt")
    image_data_set_path = os.path.join(rollout_course_path,"images"+data_set_name+".pt")

    # Compress the image data
    Images = du.compress_data(Images)

    trajectory_data_set = {"data":Trajectories,
                           "tXUi":tXUi,
                            "set":data_set_name,"Ndata":Ndata,"course":course_name}
    image_data_set = {"data":Images,
                        "set":data_set_name,"Ndata":Ndata,"course":course_name}

    torch.save(trajectory_data_set,trajectory_data_set_path)
    torch.save(image_data_set,image_data_set_path)
